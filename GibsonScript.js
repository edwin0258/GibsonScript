/* Much thanks to all the tutorials on youtube! */

var tokens = []
/* SYNTAX - object */
/*
	key: 	Is the desired function of the value, such as
				print. At the momment "DECK" will execute the
				desired function of print or console.log in a
				language.
*/
var syntax = {"PRINT": "DECK","END":"<JACKOUT>"}

/* LEX - https://en.wikipedia.org/wiki/Lexical_analysis */
/*
	tok: 	How the lex converts characters into meaningful tokens
				such as strings and functions
	state:	detects a string, if it finds a " it will turn on and
					collect the string utill it finds the next " where it
					will then send the string off as a token appending it
					to the tokens array.
	string: This is where the string is collected when the state
					is turned on.
*/

function lex(script){
	var tok = ""; 
	var state = 0;
	var isexpr = 0;
	var string = "";
	var expr = "";
	var num = ""
	script = script.split('');
	for(x in script){
		char = script[x];
		tok+=char;
		if(tok === " "){
			tok = ""
		}
		else if(tok === "\n" || tok == syntax["END"]){
			if(expr != "" && isexpr == 1){
				tokens.push("EXPR: " + expr);
				expr = "";
			}
			if(expr != "" && isexpr == 0){
				tokens.push("NUM: " + expr)
				expr = "";
			}
			tok = ""
		}
		//console.log(tok)
		if(tok === syntax["PRINT"]){
			tokens.push(syntax["PRINT"])
			tok = "";
		}
		else if(tok.match(/\d/g)){
			expr += tok;
			console.log("NUMBER");
			tok = "";
		}
		else if(tok.match(/\+|-|\/|\*|\)|\(/g)){
			isexpr = 1;
			expr += tok;
			tok = "";
		}
		//if STRING//
		else if(tok === "\""){
			if(state === 0){
				state = 1
			}
			else{
				state = 0
				tokens.push("STRING: " + string)
				string = ""
				tok = ""
			}
		}
		else if(state == 1){
			string+=char;
			tok = ""
		}
		//if NUMBER//
		else if(tok == parseInt(tok)){
			tokens.push(parseInt(tok))
			tok = ""
		}
	}
	//console.log(expr)
	return tokens
}

/* PARSER - function */
/*
	Takes the tokens generated by the lex and actually
	figures out what to do with them (parsing them).
	For each tok it will examine and determine if
	anything needs to be done.
	
	PRINT
		argument: This is what should be printed
							so PRINT 'argument'
*/

function parser(toks){
	console.log(toks)
	toks.map((a,b) => {
		if(a == syntax["PRINT"]){
			//if(toks[b+1]){console.error("NO")}
			var argument = toks[b+1]
			if(argument.match("STRING")){
				console.log(argument.slice(8,argument.length))
			}
			else if(argument.match("NUM")){
				console.log(parseInt(argument.slice(5,argument.length)))
			}
			else if(argument.match("EXPR")){
				console.log(evaluateExpr(argument.slice(6,argument.length)))
			}
		}
	})
}

function evaluateExpr(expression){
	for(x in expression){
		//prevent malicious intent
		if(!x.match(/\+|-|\/|\*|\)|\(|\d/g)){
			console.error("Invalid Expression")
			return 0;
		}
	}
	return eval(expression)
}


/*
GibsonScript V.000001
To use GS:
	1. 	Add this pen in javascript Add External JS section
			for your pen.
	2.	Wrap your code like:
			gibson(
			`
			CODE HERE
			`
			)
*/
function gibson(script){
	var toks = lex(script)
	parser(toks)
}
